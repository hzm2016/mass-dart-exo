2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_setup.py:_flush():68] Current SDK version is 0.19.1
2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_setup.py:_flush():68] Configure stats pid to 54157
2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_setup.py:_flush():68] Loading settings from /home/harlab/.config/wandb/settings
2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_setup.py:_flush():68] Loading settings from /home/harlab/1-ncsu/mass-dart-exo/python/wandb/settings
2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_setup.py:_flush():68] Loading settings from environment variables
2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_init.py:_log_setup():528] Logging user logs to /home/harlab/1-ncsu/mass-dart-exo/python/wandb/run-20241229_094302-b1ek9eww/logs/debug.log
2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_init.py:_log_setup():529] Logging internal logs to /home/harlab/1-ncsu/mass-dart-exo/python/wandb/run-20241229_094302-b1ek9eww/logs/debug-internal.log
2024-12-29 09:43:02,122 INFO    MainThread:54157 [wandb_init.py:init():644] calling init triggers
2024-12-29 09:43:02,123 INFO    MainThread:54157 [wandb_init.py:init():650] wandb.init called with sweep_config: {}
config: {'_name': 'wandb.config', '__doc__': 'Config object.\n\n    Config objects are intended to hold all of the hyperparameters associated with\n    a wandb run and are saved with the run object when `wandb.init` is called.\n\n    We recommend setting `wandb.config` once at the top of your training experiment or\n    setting the config as a parameter to init, ie. `wandb.init(config=my_config_dict)`\n\n    You can create a file called `config-defaults.yaml`, and it will automatically be\n    loaded into `wandb.config`. See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    You can also load a config YAML file with your custom name and pass the filename\n    into `wandb.init(config="special_config.yaml")`.\n    See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    Examples:\n        Basic usage\n        ```\n        wandb.config.epochs = 4\n        wandb.init()\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Using wandb.init to set config\n        ```\n        wandb.init(config={"epochs": 4, "batch_size": 32})\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Nested configs\n        ```\n        wandb.config[\'train\'][\'epochs\'] = 4\n        wandb.init()\n        for x in range(wandb.config[\'train\'][\'epochs\']):\n            # train\n        ```\n\n        Using absl flags\n        ```\n        flags.DEFINE_string("model", None, "model to run")  # name, default, help\n        wandb.config.update(flags.FLAGS)  # adds all absl flags to config\n        ```\n\n        Argparse flags\n        ```python\n        wandb.init()\n        wandb.config.epochs = 4\n\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\n            "-b",\n            "--batch-size",\n            type=int,\n            default=8,\n            metavar="N",\n            help="input batch size for training (default: 8)",\n        )\n        args = parser.parse_args()\n        wandb.config.update(args)\n        ```\n\n        Using TensorFlow flags (deprecated in tensorflow v2)\n        ```python\n        flags = tf.app.flags\n        flags.DEFINE_string("data_dir", "/tmp/data")\n        flags.DEFINE_integer("batch_size", 128, "Batch size.")\n        wandb.config.update(flags.FLAGS)  # adds all of the tensorflow flags to config\n        ```\n    '}
2024-12-29 09:43:02,123 INFO    MainThread:54157 [wandb_init.py:init():680] starting backend
2024-12-29 09:43:02,123 INFO    MainThread:54157 [wandb_init.py:init():684] sending inform_init request
2024-12-29 09:43:02,141 INFO    MainThread:54157 [backend.py:_multiprocessing_setup():104] multiprocessing start_methods=fork,spawn,forkserver, using: spawn
2024-12-29 09:43:02,141 INFO    MainThread:54157 [wandb_init.py:init():697] backend started and connected
2024-12-29 09:43:02,142 INFO    MainThread:54157 [wandb_init.py:init():790] updated telemetry
2024-12-29 09:43:02,150 INFO    MainThread:54157 [wandb_init.py:init():822] communicating run to backend with 90.0 second timeout
2024-12-29 09:43:02,688 ERROR   MainThread:54157 [wandb_init.py:init():849] encountered error: failed to upsert bucket: returned error 404 Not Found: {"errors":[{"message":"project not found","path":["upsertBucket"]}],"data":{"upsertBucket":null}}
2024-12-29 09:43:02,689 ERROR   MainThread:54157 [wandb_init.py:init():1308] error in wandb.init()
Traceback (most recent call last):
  File "/home/harlab/anaconda3/envs/exo/lib/python3.8/site-packages/wandb/sdk/wandb_init.py", line 1298, in init
    return wi.init()
  File "/home/harlab/anaconda3/envs/exo/lib/python3.8/site-packages/wandb/sdk/wandb_init.py", line 855, in init
    raise error
wandb.errors.errors.CommError: failed to upsert bucket: returned error 404 Not Found: {"errors":[{"message":"project not found","path":["upsertBucket"]}],"data":{"upsertBucket":null}}
2024-12-29 09:43:02,698 WARNING MsgRouterThr:54157 [router.py:message_loop():75] message_loop has been closed
